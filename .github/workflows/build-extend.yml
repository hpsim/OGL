name: foam-extend

on: [pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        OF: [
             {repo: "git://git.code.sf.net/p/foam-extend/foam-extend-4.1",
             path: "foam-extend-4.1",
             version: "4.1",
             mpi: "SYSTEMOPENMPI"}]
    
    env:
      FOAM_INST_DIR: /home/runner/OpenFOAM/
  
    steps:
    - name: Setting up OF enviroment
      run: |
        echo "FOAM_INST_DIR=/home/runner/OpenFOAM" >> $GITHUB_ENV
        echo "WM_PROJECT=OpenFOAM" >> $GITHUB_ENV
        echo "WM_PROJECT_VERSION=${{ matrix.OF.version }}" >> $GITHUB_ENV
        echo "WM_OPTIONS=linux64gccDPInt32Opt" >> $GITHUB_ENV
        echo "WM_DIR=${{env.FOAM_INST_DIR}}/${{ matrix.OF.path }}/wmake" >> $GITHUB_ENV
        echo "${{env.FOAM_INST_DIR}}/${{ matrix.OF.path }}/wmake" >> $GITHUB_PATH
        echo "WM_COMPILER_TYPE=system" >> $GITHUB_ENV
        echo "WM_COMPILER=Gcc" >> $GITHUB_ENV
        echo "WM_PRECISION_OPTION=DP" >> $GITHUB_ENV
        echo "WM_LABEL_SIZE=32" >> $GITHUB_ENV
        echo "WM_COMPILE_OPTION=Opt" >> $GITHUB_ENV
        echo "WM_MPLIB=${{matrix.OF.mpi}}" >> $GITHUB_ENV
        echo "WM_OSTYPE=POSIX" >> $GITHUB_ENV
        echo "WM_PROJECT_INST_DIR=${{env.FOAM_INST_DIR}}" >> $GITHUB_ENV
        echo "WM_THIRD_PARTY_DIR=${{env.FOAM_INST_DIR}}/ThirdParty-${{matrix.OF.version}}" >> $GITHUB_ENV
        echo "WM_ARCH=linux64" >> $GITHUB_ENV
        echo "WM_ARCH_OPTION=64" >> $GITHUB_ENV
        echo "WM_LINK_LANGUAGE=c++" >> $GITHUB_ENV
        echo "WM_LABEL_OPTION=Int32" >> $GITHUB_ENV
        echo "FOAM_ETC=$FOAM_INST_DIR/${{matrix.OF.path}}/etc" >> $GITHUB_ENV
        echo "FOAM_SRC=$FOAM_INST_DIR/${{matrix.OF.path}}/src" >> $GITHUB_ENV
        echo "FOAM_APP=$FOAM_INST_DIR/${{matrix.OF.path}}/applications" >> $GITHUB_ENV
        echo "FOAM_TUTORIALS=$FOAM_INST_DIR/${{matrix.OF.path}}/tutorials" >> $GITHUB_ENV
        echo "FOAM_UTILITIES=$FOAM_INST_DIR/${{matrix.OF.path}}/applications/utilities" >> $GITHUB_ENV
        echo "FOAM_SOLVERS=$FOAM_INST_DIR/${{matrix.OF.path}}/applications/solvers" >> $GITHUB_ENV
        echo "WM_PROJECT_DIR=$FOAM_INST_DIR/${{matrix.OF.path}}" >> $GITHUB_ENV
        echo "WM_OPTIONS=linux64GccDPInt32Opt" >> $GITHUB_ENV
        echo "FOAM_LIBBIN=$FOAM_INST_DIR/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib" >> $GITHUB_ENV
        echo "FOAM_APPBIN=$FOAM_INST_DIR/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_ENV
        echo "FOAM_EXT_LIBBIN=$FOAM_INST_DIR/ThirdParty/platforms/linux64GccDPInt32Opt/lib" >> $GITHUB_ENV
        echo "$FOAM_INST_DIR/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_PATH
        echo "FOAM_USER_PATH=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}" >> $GITHUB_ENV
        echo "FOAM_USER_PLATTFORM=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt" >> $GITHUB_ENV
        echo "FOAM_USER_LIBBIN=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/lib" >> $GITHUB_ENV
        echo "FOAM_USER_APPBIN=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_ENV
        echo "${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/bin" >> $GITHUB_PATH
        echo "Ginkgo_DIR=${{env.FOAM_INST_DIR}}/${{github.actor}}-${{matrix.OF.version}}/platforms/linux64GccDPInt32Opt/lib/cmake/Ginkgo" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${{env.FOAM_INST_DIR}}/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib:        ${{env.FOAM_INST_DIR}}/${{matrix.OF.path}}/platforms/linux64GccDPInt32Opt/lib/dummy:        ${{env.FOAM_INST_DIR}}/ThirdParty-${{matrix.OF.version}}/platforms/linux64Gcc/openmpi-2.1.1/lib:        ${{env.FOAM_INST_DIR}}/ThirdParty-${{matrix.OF.version}}/platforms/linux64Gcc/openmpi-2.1.1/lib64" >> $GITHUB_ENV
        env
        #FOAM_SITE_APPBIN: ${{env.FOAM_INST_DIR}}/${{ matrix.OF.path }}/site/2106/platforms/darwin64ClangDPInt32Opt/bin
        #FOAM_SITE_LIBBIN: ${{env.FOAM_INST_DIR}}/${{ matrix.OF.path }}/site/2106/platforms/darwin64ClangDPInt32Opt/lib
        #FOAM_RUN: ${{env.FOAM_INST_DIR}}/go-v2106/run
        #FOAM_API: 2106

    
    - name: Cache OpenFOAM
      uses: actions/cache@v2
      with:
        key: ${{ matrix.OF.path }}
        path: /home/runner/OpenFOAM/
          
    - name: Install build depencies  
      # Clone OpenFOAM
      run: |
        sudo apt update
        sudo apt install \
          git \
          build-essential \
          autoconf \
          autotools-dev \
          flex bison cmake zlib1g-dev \
          libfl-dev \
          mpi-default-bin mpi-default-dev \
          libopenmpi-dev openmpi-bin gnuplot libreadline-dev libncurses-dev libxt-dev \
          libscotch-dev libcgal-dev python python-dev

    - name: Clone OpenFOAM 
      run: |
        if [ ! -d /home/runner/OpenFOAM/${{matrix.OF.path}} ]; then
          git clone  --depth 1 ${{ matrix.OF.repo }} \
            /home/runner/OpenFOAM/${{ matrix.OF.path }}
        fi


    - name: Build OpenFOAM
      # Clone OpenFOAM
      working-directory: /home/runner/OpenFOAM/${{ matrix.OF.path }}
      run: ./Allwmake -j
      
    - name: Show OpenFOAM folder
      # Clone OpenFOAM
      run: ls /home/runner/OpenFOAM/${{ matrix.OF.path }}
      
    - uses: actions/checkout@v2
    - name: Install ninja-build tool
      # You may pin to the exact commit or the version.
      # uses: seanmiddleditch/gha-setup-ninja@16b940825621068d98711680b6c3ff92201f8fc0
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        # Version of ninja-build to install
        version: 1.10.0 # default is 1.10.0
    
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: "/home/runner/OpenFOAM/openfoam/etc/openfoam"
      working-directory: ${{github.workspace}}
      run: |
        mkdir build 
        cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
