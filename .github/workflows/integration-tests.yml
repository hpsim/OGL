name: Integration Tests

defaults:
 run:
  shell: bash -o pipefail -i {0}

on: 
  workflow_call:
    inputs:
      path:
        required: true
        type: string
      version:
        required: true
        type: string
      cyclic_case:
        required: true
        type: string
run-name: Integration test on ${{github.ref_name}}

env:
  BUILD_TYPE: Release
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  MPI_BUFFER_SIZE: 20000000 

jobs:
  setup_integration_matrix:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
      steps:
      - id: set-matrix
        run: |
          echo "matrix=[\"cavity\"]" >> $GITHUB_OUTPUT

  setup:
    runs-on: ubuntu-latest
    container: greole/ofbase
    needs: setup_integration_matrix
    name: setup-${{matrix.Case}}-${{inputs.version}}
    strategy:
      fail-fast: false
      matrix: 
        Case: ${{fromJson(needs.setup_integration_matrix.outputs.matrix)}}

    steps:
    - uses: actions/checkout@v4

    - name: Get Ginkgo checkout version
      shell: bash
      run: |
        grep -A1 "set(GINKGO_CHECKOUT_VERSION" CMakeLists.txt|tail -n1|grep -o  "[0-9a-z]*" > GINKGO_CHECKOUT_VERSION
        export GINKGO_CHECKOUT_VERSION=$(cat GINKGO_CHECKOUT_VERSION)
        echo "GINKGO_CHECKOUT_VERSION=$GINKGO_CHECKOUT_VERSION" >> $GITHUB_ENV

    - name: Source OF enviroment
      run: |
        echo "Ginkgo_DIR=${{env.FOAM_INST_DIR}}/root-${{inputs.version}}/platforms/linux64GccDPInt32Opt/lib/cmake/Ginkgo" >> $GITHUB_ENV
        echo "GINKGO_EXECUTOR=reference" >> $GITHUB_ENV
        echo "CYCLIC_CASE=${{inputs.cyclic_case}}" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_vader_single_copy_mechanism=none" >> $GITHUB_ENV

    - name: Cache workspace
      uses: actions/cache@v3
      with:
        key: ws-${{inputs.version}}-${{matrix.Case}}-${{ github.sha }}
        path: /home/runner/work/_temp/_github_home/${{matrix.Case}}

    - name: Generate test cases
      working-directory: /github/home/
      shell: bash
      run: |
        source /root/OpenFOAM/${{inputs.path}}/etc/bashrc
        export OBR_RUN_CMD="mpirun --bind-to core --map-by core -np {np} {solver} -parallel -case {path}/case > {path}/case/{solver}_{timestamp}.log 2>&1"

        mkdir -p ${{matrix.Case}} && cd ${{matrix.Case}}
        obr init --config /__w/OGL/OGL/test/${{matrix.Case}}.yaml
        obr run -o generate

  run:
    runs-on: ubuntu-latest
    container: greole/ofbase
    needs: [setup_integration_matrix, setup]
    name: run-${{matrix.Case}}-${{inputs.version}}
    strategy:
      fail-fast: false
      matrix: 
        Case: ${{fromJson(needs.setup_integration_matrix.outputs.matrix)}}

    steps:
    - uses: actions/checkout@v4

    - name: Get Ginkgo checkout version
      shell: bash
      run: |
        grep -A1 "set(GINKGO_CHECKOUT_VERSION" CMakeLists.txt|tail -n1|grep -o  "[0-9a-z]*" > GINKGO_CHECKOUT_VERSION
        export GINKGO_CHECKOUT_VERSION=$(cat GINKGO_CHECKOUT_VERSION)
        echo "GINKGO_CHECKOUT_VERSION=$GINKGO_CHECKOUT_VERSION" >> $GITHUB_ENV

    - name: Source OF enviroment
      run: |
        echo "Ginkgo_DIR=${{env.FOAM_INST_DIR}}/root-${{inputs.version}}/platforms/linux64GccDPInt32Opt/lib/cmake/Ginkgo" >> $GITHUB_ENV
        echo "GINKGO_EXECUTOR=reference" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_vader_single_copy_mechanism=none" >> $GITHUB_ENV

    - name: Cache build
      uses: actions/cache@v3
      with:
        key: build-${{ inputs.path }}-${{env.GINKGO_CHECKOUT_VERSION}}
        path: |
          ${{github.workspace}}/build

    - name: Cache FOAM_USER_LIBBIN
      uses: actions/cache@v3
      with:
        key: FOAM_USER_LIBBIN-${{ inputs.version }}-${{ github.sha }}
        path: |
          ${{env.FOAM_USER_LIBBIN}}


    - name: Check folders
      run: |
        ls -la $FOAM_USER_LIBBIN/libOGL.so
        ls -la $FOAM_USER_LIBBIN/libginkgo.so

    - name: Cache Workspace
      uses: actions/cache@v3
      with:
        key: ws-${{inputs.version}}-${{matrix.Case}}-${{ github.sha }}
        path: /home/runner/work/_temp/_github_home/${{matrix.Case}}

    - name: Execute test cases
      working-directory: /github/home/${{matrix.Case}}
      timeout-minutes: 10
      shell: bash
      run: |
        source /root/OpenFOAM/${{inputs.path}}/etc/bashrc
        export OBR_RUN_CMD="mpirun --bind-to core --map-by core -np {np} {solver} -parallel -case {path}/case >  {path}/case/{solver}_{timestamp}.log 2>&1"
        obr run -o runParallelSolver

    - name: Validation of exported mtx files
      working-directory: /github/home/${{matrix.Case}}
      shell: bash
      run: |
        python3 /__w/OGL/OGL/test/data_validation.py workspace
        ls -la workspace/*/case/processor0/*

    - name: Validate unpreconditioned state
      working-directory: /github/home/${{matrix.Case}}
      run: |
        obr status
        obr query \
        -q global -q continuityErrors -q CourantNumber \
        --filter preconditioner==none \
        --filter matrixFormat==Coo \
        --filter global==completed \
        --validate_against=/__w/OGL/OGL/test/${{matrix.Case}}_validation.json

    - name: Validate preconditioned state
      working-directory: /github/home/${{matrix.Case}}
      run: |
        obr status
        obr query \
        -q global -q continuityErrors -q CourantNumber \
        --validate_against=/__w/OGL/OGL/test/${{matrix.Case}}_validation.json \
        --filter preconditioner!=none \
        --filter global==completed

    - name: Validate matrix formats
      working-directory: /github/home/${{matrix.Case}}
      run: |
        obr status
        obr query \
        -q global -q continuityErrors -q CourantNumber \
        --validate_against=/__w/OGL/OGL/test/${{matrix.Case}}_validation.json \
        --filter matrixFormat!=Coo \
        --filter global==completed


    - name: Rename log files
      if: failure()
      working-directory: /github/home/
      run: |
        find . -name "*:*" -exec rename 's|:|-|g' {} \;

    - name: Archive integration artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ogl_integration_${{ inputs.path }}
        path: /github/home
